/////////////////////
// ARRAY FUNCTIONS //
/////////////////////

// check whether all elements of array are true
function all(array) {
	for (i = 0; i < array.length; i ++) if (!array[i]) return(false);
	return true;
}

// check whether any element of a array is true
function any(array) {
	for (i = 0; i < array.length; i ++) if (array[i]) return(true);
	return false;
}

/* get unique elements of array
 * returns array
 */
function unique(array) {
	sorted = Array.sort(array);
	uniques = Array.trim(sorted, 1);
	for (i = 1; i < array.length; i++) {
		if (sorted[i] != sorted[i-1]) uniques = Array.concat(uniques, array[i]);
	}
	return uniques;
}

// return sum of all elements of array
function sum(array) {
	result = 0;
	for (i = 0; i < array.length ; i++) result = result + array[i];
	return result;
}

// get maximum value of array (wrapper for Array method)
function maximum(array) {
	Array.getStatistics(array, min, max, mean, stdDev);
	return max;
}

//concatenate elements of array with separator
function unsplit(array, separator) {
	y = array[0];
	for (i = 1; i < array.length; i++) y = y + separator + array[i];
	return y;
}

// interleave two arrays
function interleave(array1, array2) {
	if (array1.length <= array2.length) {
		shorter = array1; longer = array2;
	} else {
		longer = array1; shorter = array2;
	}
	A = newArray();
	for (i = 0; i < shorter.length; i++) A = Array.concat(A, array1[i], array2[i]);
	leftovers = Array.slice(longer, shorter.length ,longer.length);
	Al = Array.concat(A, leftovers);
	return Al;
}


////////////////////
// FILE FUNCTIONS //
////////////////////

// check in there are any .oib files in a directory
function any_oibs(folder) {
	files = getFileList(folder);
	for (i = 0; i < files.length; i++) {
		if (endsWith(files[i], "\.oib") || endsWith(files[i], "\.oif")) return(true);
	}
	return false;
}

// delete a file or a non-empty directory (recursively)
function remove(file) {
	if (File.isDirectory(file)) {
		contents = getFileList(file);
		if (contents.length != 0) for (i = 0; i < contents.length; i++) {
			if (File.isDirectory(file + File.separator + contents[i])) remove(file + File.separator + contents[i]);
			File.delete(file + File.separator + contents[i]);
		}		
	}
	File.delete(file);
}

/* copy file or contents of directory (recursively)
 * path1 may be a file or a directory 
 * path2 must be a file or an existing directory, respectively
 */
function copy_all(path1, path2) {
	if (!File.exists(path1)) exit("\"path1\" does not exist");
	if (File.isDirectory(path2) && !File.isDirectory(path1)) exit("\"path2\" must be file path");
	if (File.isDirectory(path2) && !File.exists(path2)) exit("\"path2\" must be an existing directory");

	if (File.isDirectory(path1)) {
		File.makeDirectory(path2);
		contents = getFileList(path1);
		for (i = 0; i < contents.length; i++) copy_all(path1 + File.separator + contents[i], path2 + File.separator + contents[i]);
	} else {
		File.copy(path1, path2);
	}
}


/////////////////////
// COLOR FUNCTIONS //
/////////////////////

// select a LUT
function make_LUT(color) {
// create 'Gray" for default value
	reds = newArray(256); greens = newArray(256); blues = newArray(256);
	for (i=0; i<256; i++) { reds[i] = i; greens[i] = i; blues[i] = i; }
// custom colours
	if (color == "Hoechst" || color == "hoechst" || color == "DNA" || color == "#3faaff") {
    	for (i=0; i<256; i++) { reds[i] = floor(i * 1/4); greens[i] = floor(i * 2/3); blues[i] = i; }
	} else if (color == "Blue-ish" || color == "blue-ish" || color == "Blueish" ||color == "blueish" || color == "#3faaff") {
    	for (i=0; i<256; i++) { reds[i] = floor(i * 1/4); greens[i] = floor(i * 2/3); blues[i] = i; }
	} else if (color == "Yellow-ish" || color == "yellow-ish" || color == "Yellowish" ||color == "yellowish" || color == "#ffff3f") {
    	for (i=0; i<256; i++) { reds[i] = i; greens[i] = i; blues[i] = floor(i * 1/4); }
	} else if (color == "Green-ish" || color == "green-ish" || color == "Greenish" ||color == "greenish" || color == "#0ff55") {
    	for (i=0; i<256; i++) { reds[i] = 0; greens[i] = i; blues[i] = floor(i * 1/3); }
	} else if (color == "Red-ish" || color == "red-ish" || color == "Redish" || color == "redish" || color == "#ff3333") {
	    for (i=0; i<256; i++) { reds[i] = i; greens[i] = floor(i * 1/5); blues[i] = floor(i * 1/5); }
	}
// standard colors
	else if (color == "Red" || color == "red" || color == "#ff00") {
    	for (i=0; i<256; i++) { reds[i] = i; greens[i] = 0; blues[i] = 0; }
	} else if (color == "Green" || color == "green" || color == "#0ff0") {
    	for (i=0; i<256; i++) { reds[i] = 0; greens[i] = i; blues[i] = 0; }
	} else if (color == "Blue" || color == "blue" || color == "#00ff") {
    	for (i=0; i<256; i++) { reds[i] = 0; greens[i] = 0; blues[i] = i; }
	} else if (color == "Cyan" || color == "cyan" || color == "#0ffff") {
    	for (i=0; i<256; i++) { reds[i] = 0; greens[i] = i; blues[i] = i; }
	} else if (color == "Magenta" || color == "magenta" || color == "#ff0ff") {
    	for (i=0; i<256; i++) { reds[i] = i; greens[i] = 0; blues[i] = i; }
	} else if (color == "Yellow" || color == "yellow" || color == "#ffff0") {
    	for (i=0; i<256; i++) { reds[i] = i; greens[i] = i; blues[i] = 0; }
	} else if (color == "Hi-Lo" || color == "HiLo" || color == "hi-lo" || color == "hilo") {
    	for (i=0; i<256; i++) { reds[i] = i; greens[i] = i; blues[i] = i; blues[0] = 255; greens[255] = 0; blues[255] = 0; }
	}
	setLut(reds, greens, blues);
}

function makeLUT(color) {
// create gray as default
	reds = newArray(256); greens = newArray(256); blues = newArray(256);
	red = 1; green = 1; blue = 1;
// built-in colors
	if (color == "gray" || color == "grey" || color == "Gray" || color == "Grey") {}
	else if (color == "red" || color == "Red" || color == "#ff00") {green = 0; blue = 0;}
	else if (color == "green" || color == "Green" || color == "#0ff0") {red = 0; blue = 0;}
	else if (color == "blue" ||color == "Blue" || color == "#00ff") {red = 0; green = 0;}
	else if (color == "cyan" || color == "Cyan" || color == "#0ffff") {red = 0;}
	else if (color == "magenta"|| color == "Magenta" || color == "#ff0ff") {green = 0;}
	else if (color == "yellow" || color == "Yellow" || color == "#ffff0") {blue = 0;}
// custom colors
	else if (color == "redish" || color == "Red-ish" || color == "red-ish" || color == "Redish" || color == "#ff3333") {
		green = 1/5; blue = 1/5;}
	else if (color == "greenish" || color == "Green-ish" || color == "green-ish" || color == "Greenish" || color == "#0ff55") {
		blue = 1/3;}
	else if (color == "blueish" || color == "Blue-ish" || color == "blue-ish" || color == "Blueish" || color == "#3faaff") {
		red = 1/4; green = 2/3;}
	else if (color == "yellowish" || color == "Yellow-ish" || color == "yellow-ish" || color == "Yellowish" || color == "#ffff3f") {
		blue = 1/4;}
	else if (color == "Hoechst" || color == "hoechst" || color == "DNA" || color == "#3faaff") {
		red = 1/4; green = 2/3;}

// construct new rbg values
	for (i = 0; i < 256; i++) {
		reds[i] = floor(i * red); greens[i] = floor(i * green); blues[i] = floor(i * blue);
	}
// set max and min colors for HiLo
	if (color == "HiLo") {blues[0] = 255; greens[255] = 0; blues[255] = 0}
// set the LUT
	setLut(reds, greens, blues);
}

// make hex codes of colors named by string
function make_color(color){
// built-in colors
	if (color == "red") return "#" + toHex(255) + "00" + "00";
	if (color == "green") return "#" + "00" + toHex(255) + "00";
	if (color == "blue") return "#" + "00" + "00" + toHex(255);
	if (color == "cyan") return "#" + "00" + toHex(255) + toHex(255);
	if (color == "magenta") return "#" + toHex(255) + "00" + toHex(255);
	if (color == "yellow") return "#" + toHex(255) + toHex(255) + "00";
	if (color == "gray") return "#" + toHex(255) + toHex(255) + toHex(255);
	if (color == "Hi-Lo") return "#" + toHex(255) + toHex(255) + toHex(255);
// custom colors
	if (color == "redish") return "#" + toHex(255) + toHex(255 * 1/5) + toHex(255 * 1/5);
	if (color == "greenish") return "#" + "00" + toHex(255) + toHex(255 * 1/3);
	if (color == "blueish") return "#" + toHex(255 * 1/4) + toHex(255 * 2/3) + toHex(255);
	if (color == "yellowish") return "#" + toHex(255) + toHex(255) + toHex(255 * 1/4);	
}


