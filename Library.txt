// custom functions by Aleksander Chlebowski

/////////////////////
// ARRAY FUNCTIONS //
/////////////////////

// check whether all elements of array are true
function all(array) {
	for (i = 0; i < array.length; i ++) if (!array[i]) return(false);
	return true;
}

// check whether any element of a array is true
function any(array) {
	for (i = 0; i < array.length; i ++) if (array[i]) return(true);
	return false;
}

/* get unique elements of array
 * returns array
 * result is sorted
 */
function unique(array) {
	sorted = Array.sort(array);
	uniques = Array.trim(sorted, 1);
	for (i = 1; i < array.length; i++) {
		if (sorted[i] != sorted[i-1]) uniques = Array.concat(uniques, array[i]);
	}
	return uniques;
}

/* non-sorting versions of unique
 * are significantly slower
 */
function uniqueSlow(array) {
	uniques = newArray();
	for (i = 0; i < array.length; i++) {
		ind = whichfirst(uniques, array[i]);
		if (isNaN(ind)) uniques = Array.concat(uniques, array[i]);
	}

	return uniques;
}
function uniqueSlow2(array) {
	uniques = newArray();
	for (i = 0; i < array.length; i++) {
		if (!iselement(uniques, array[i])) uniques = Array.concat(uniques, array[i]); else continue;
	}

	return uniques;
}

// return sum of all elements of array
function sum(array) {
	result = 0;
	for (i = 0; i < array.length ; i++) result = result + array[i];
	return result;
}

// get maximum value of array (wrapper for Array method)
function maximum(array) {
	Array.getStatistics(array, min, max, mean, stdDev);
	return max;
}

// get minimum value of array (wrapper for Array method)
function minimum(array) {
	Array.getStatistics(array, min, max, mean, stdDev);
	return min;
}

//concatenate elements of array with separator
function unsplit(array, separator) {
	y = array[0];
	for (i = 1; i < array.length; i++) y = y + separator + array[i];
	return y;
}

// interleave two arrays
function interleave(array1, array2) {
	if (array1.length <= array2.length) {
		shorter = array1; longer = array2;
	} else {
		longer = array1; shorter = array2;
	}
	A = newArray();
	for (i = 0; i < shorter.length; i++) A = Array.concat(A, array1[i], array2[i]);
	leftovers = Array.slice(longer, shorter.length ,longer.length);
	Al = Array.concat(A, leftovers);
	return Al;
}

/* check if string is element of array
 * returns boolean
 */
function iselement(array, string) {
	for (i = 0; i < array.length; i++) if (matches(array[i], string)) return true; else continue;
	return false;
}

// return logical array of matches of regex to elements of array
function which(array, regex) {
	ans = newArray(array.length);
	for (i = 0; i < ans.length; i++) ans[i] = matches(array[i], regex);
	return ans;
}

// return (integer) index of first match of regex in array
function whichfirst(array, regex) {
	for (i = 0; i < array.length; i++) if (matches(array[i], regex)) return i; else continue;
	return NaN;
}



/* subset an array with a logical index array
 * returns a (possibly shorter and possibly empty) array
 */
function subset(array, index) {
	if (array.length != index.length) exit("\"array\" and \"index\" must be of the same length");
	ans = newArray(0);
	for (i = 0; i < array.length; i++) if (index[i]) ans = Array.concat(ans, array[i]); else continue;
	return ans;
}

/* subset array with array of numerical indices
 * returns (possibly shorter) array
 */
function filter(array, index) {
	if (maximum(index) >= array.length) exit("ERROR in call to filter: \nindex is out of range or array length");
	filtered = newArray();
	for (i = 0; i < index.length; i++) {
		if (isNaN(index[i])) continue;
		filtered = Array.concat(filtered, array[index[i]]);
	}

	return filtered;
}

/* drop elements of array that match regex
 * returns array
 */
function drop(array, regex) {
	ans = newArray();
	for (i = 0; i < array.length; i++) if (!matches(array[i], regex)) ans = Array.concat(ans, array[i]); else continue;
	return ans;
}

/* drop elements of array that do not match regex
 * returns array
 */
function keep(array, regex) {
	ans = newArray();
	for (i = 0; i < array.length; i++) if (matches(array[i], regex)) ans = Array.concat(ans, array[i]); else continue;
	return ans;
}

/* check if each element of array is duplicated
 * returns array
 */


/* checks whether array has any duplicated elements
 * returns boolean
 */
function anyduplicates(array) {
	for (i = 0; i < array.length; i++) {
		for (j = i+1; j < array.length; j++) {
			if (array[j] == array[i]) return true; else continue;
		}
	}
	return false;
}

// flip boolean array, true to false and vice versa
function flipBoolean(array) {
	ans = newArray(array.length);
	for (i = 0; i < array.length ; i++) ans[i] = !array[i];
	return ans;	
}

/* return indexing array that will make elements of array1 appear in the same order as they do in array2 (after call to filter)
 * array1 and array2 need not have the same elements
 * duplicates are forbidden
 */
function order(array1, array2) {
	if (anyduplicates(array1)) exit("ERROR in call to order:\n array1 contains duplicated elements");
	if (anyduplicates(array2)) exit("ERROR in call to order:\n array2 contains duplicated elements");

	I = intersect(array2, array1);
	ind = newArray(I.length);
	for (i = 0; i < I.length; i++) ind[i] = whichfirst(array1, I[i]);
	a = filter(array1, ind);
	
	index = newArray(a.length);
	for (i = 0; i < index.length; i++) index[i] = whichfirst(array1, a[i]);
	
	return index;
}

///////////////////
// SET FUNCTIONS //
///////////////////

/* get common elements of two arrays
 * returns (possibly empty) array
 */
function intersect(array1, array2) {
	a1 = uniqueSlow(array1);
	a2 = uniqueSlow(array2);
	I = newArray(a1.length);
	for (i = 0; i < I.length; i++) {
		r = a1[i];
		for (j = 0; j < a2.length; j++) if(matches(r, a2[j])) I[i] = true; else continue;
	}
	A = subset(a1, I);
	return A;
}

/* get elements of array1 that do not apear in array2
 * returns (possibly empty) array
 */
function setdiff(array1, array2) {
	a1 = uniqueSlow(array1);
	a2 = uniqueSlow(array2);
	I = newArray(a1.length);
	I = Array.fill(I, 1);
	for (i = 0; i < I.length; i++) {
		r = a1[i];
		for (j = 0; j < a2.length; j++) if (matches(r, a2[j])) I[i] = false; else continue;
	}
	A = subset(a1, I);
	return A;
}

// get all unique elements of array 1 and array2
function setsum(array1, array2) {
	a1 = uniqueSlow(array1);
	a2 = uniqueSlow(array2);
	A = newArray(a1.length + a2.length);
	for (i = 0; i < a1.length; i++) A[i] = a1[i];
	for (i = a1.length; i < A.length; i++) A[i] = a2[i];
}

// get sum of two sets excluding their common elements
function setout(array1, array2) {
	S = setsum(array1, array2);
	I = intersect(array1, array2);
	O = setdiff(S, I);
	return O;
}

////////////////////
// FILE FUNCTIONS //
////////////////////

// check in there are any .oib files in a directory
function any_oibs(folder) {
	files = getFileList(folder);
	for (i = 0; i < files.length; i++) {
		if (endsWith(files[i], "\.oib") || endsWith(files[i], "\.oif")) return(true);
	}
	return false;
}

// delete a file or a non-empty directory (recursively)
function remove(file) {
	if (File.isDirectory(file)) {
		contents = getFileList(file);
		if (contents.length != 0) for (i = 0; i < contents.length; i++) {
			if (File.isDirectory(file + File.separator + contents[i])) remove(file + File.separator + contents[i]);
			File.delete(file + File.separator + contents[i]);
		}		
	}
	File.delete(file);
}

/* copy file or directory (recursively)
 * path1 may be a file or a directory 
 * path2 must be a file or a directory
 */
function copy_all(path1, path2) {
	if (!File.exists(path1)) exit("\"path1\" does not exist");

	if (File.isDirectory(path1)) {
		path1 = path1 + File.separator;
		path2 = path2 + File.separator;
		File.makeDirectory(path2);
		contents = getFileList(path1);
		for (i = 0; i < contents.length; i++) copy_all(path1 + contents[i], path2 + contents[i]);
	} else {
		File.copy(path1, path2);
	}
}

/* list all files in a folder (recursively)
 * returns array of complete file paths starting from dir
 * adapted from ImageJ Macro language demo
 */
function listFiles(dir) {
	filelist = newArray(0);
	list = getFileList(dir);
	for (i = 0; i < list.length; i++) {
		if (endsWith(list[i], "/")) {
			lowerlist = listFiles(dir + list[i]);
			filelist = Array.concat(filelist, lowerlist);
		}
		else filelist = Array.concat(filelist, dir + list[i]);
	}
	return filelist;
}

/////////////////////
// COLOR FUNCTIONS //
/////////////////////

// select a LUT
function make_LUT(color) {
// create gray as default
	reds = newArray(256); greens = newArray(256); blues = newArray(256);
	red = 1; green = 1; blue = 1;
// built-in colors
	if (color == "gray" || color == "grey" || color == "Gray" || color == "Grey") {}
	else if (color == "red" || color == "Red" || color == "#ff00") {green = 0; blue = 0;}
	else if (color == "green" || color == "Green" || color == "#0ff0") {red = 0; blue = 0;}
	else if (color == "blue" ||color == "Blue" || color == "#00ff") {red = 0; green = 0;}
	else if (color == "cyan" || color == "Cyan" || color == "#0ffff") {red = 0;}
	else if (color == "magenta"|| color == "Magenta" || color == "#ff0ff") {green = 0;}
	else if (color == "yellow" || color == "Yellow" || color == "#ffff0") {blue = 0;}
// custom colors
	else if (color == "redish" || color == "Red-ish" || color == "red-ish" || color == "Redish" || color == "#ff3333") {
		green = 1/5; blue = 1/5;}
	else if (color == "greenish" || color == "Green-ish" || color == "green-ish" || color == "Greenish" || color == "#0ff55") {
		red = 0; blue = 1/3;}
	else if (color == "blueish" || color == "Blue-ish" || color == "blue-ish" || color == "Blueish" || color == "#3faaff") {
		red = 1/4; green = 2/3;}
	else if (color == "yellowish" || color == "Yellow-ish" || color == "yellow-ish" || color == "Yellowish" || color == "#ffff3f") {
		blue = 1/4;}
	else if (color == "Hoechst" || color == "hoechst" || color == "DNA" || color == "#3faaff") {
		red = 1/4; green = 2/3;}

// construct new rbg values
	for (i = 0; i < 256; i++) {
		reds[i] = floor(i * red); greens[i] = floor(i * green); blues[i] = floor(i * blue);
	}
// set max and min colors for HiLo
	if (color == "HiLo") {blues[0] = 255; greens[255] = 0; blues[255] = 0}
// set the LUT
	setLut(reds, greens, blues);
}

// make hex codes of colors named by string
function make_color(color){
// built-in colors
	if (color == "red") return "#" + toHex(255) + "00" + "00";
	if (color == "green") return "#" + "00" + toHex(255) + "00";
	if (color == "blue") return "#" + "00" + "00" + toHex(255);
	if (color == "cyan") return "#" + "00" + toHex(255) + toHex(255);
	if (color == "magenta") return "#" + toHex(255) + "00" + toHex(255);
	if (color == "yellow") return "#" + toHex(255) + toHex(255) + "00";
	if (color == "gray") return "#" + toHex(255) + toHex(255) + toHex(255);
	if (color == "Hi-Lo") return "#" + toHex(255) + toHex(255) + toHex(255);
// custom colors
	if (color == "redish") return "#" + toHex(255) + toHex(255 * 1/5) + toHex(255 * 1/5);
	if (color == "greenish") return "#" + "00" + toHex(255) + toHex(255 * 1/3);
	if (color == "blueish") return "#" + toHex(255 * 1/4) + toHex(255 * 2/3) + toHex(255);
	if (color == "yellowish") return "#" + toHex(255) + toHex(255) + toHex(255 * 1/4);	
}

// set foreground color (used for drawing border panels in montages)
function fg_color(color) {
	if (color == "black") mod = 0;
	if (color == "gray10") mod = 0.1;
	if (color == "gray25") mod = 0.25;
	if (color == "gray50") mod = 0.5;
	if (color == "gray75") mod = 0.75;
	if (color == "white") mod = 1;
	fgc = floor(255 * mod);
	setForegroundColor(fgc, fgc, fgc);
}